{
	"info": {
		"_postman_id": "e1b09af7-c17c-49a9-94d3-a626d963f501",
		"name": "Core_Trello_API_Collection",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "35181045"
	},
	"item": [
		{
			"name": "Pre-Test Setup-Create Board",
			"item": [
				{
					"name": "Create New Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Log: Start of Folder - Pre-Test Setup Create Board\r",
									"console.log(\"Starting folder execution - Pre-Test Setup Create Board...\");\r",
									"\r",
									"// Step 1: Check for base_url environment variable\r",
									"if (!pm.environment.get(\"base_url\")) {\r",
									"    console.log(\"Step 1: Error: base_url is not set\");\r",
									"} else {\r",
									"    console.log(\"Step 1: base_url: \" + pm.environment.get(\"base_url\"));\r",
									"}\r",
									"\r",
									"// Step 2: Check for key environment variable\r",
									"if (!pm.environment.get(\"key\")) {\r",
									"    console.log(\"Step 2: Error: key is not set\");\r",
									"} else {\r",
									"    console.log(\"Step 2: Pass: key is set\");\r",
									"}\r",
									"\r",
									"// Step 3: Check for token environment variable\r",
									"if (!pm.environment.get(\"token\")) {\r",
									"    console.log(\"Step 3: Error: token is not set\");\r",
									"} else {\r",
									"    console.log(\"Step 3: Pass: token is set\");\r",
									"}\r",
									"\r",
									"// Step 4: Generate a random name for the new board with length between 1 and 16384 characters\r",
									"function generateRandomName(minLength, maxLength) {\r",
									"    const randomStr = Math.random().toString(36).substr(2, maxLength); // Generating random string\r",
									"    return randomStr.length >= minLength ? randomStr.substr(0, maxLength) : generateRandomName(minLength, maxLength); // Ensure length is within the limits\r",
									"}\r",
									"\r",
									"const randomBoardName = generateRandomName(1, 16384);\r",
									"pm.globals.set('randomBoardName', randomBoardName); \r",
									"console.log(\"Step 4: Random name generated and set successfully: \" + randomBoardName);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object\r",
									"const board = pm.response.json();\r",
									"console.log(\"Step 2: Parsed response as JSON:\", board);\r",
									"\r",
									"// Step 3: Check if the response contains an 'id' field\r",
									"pm.test(\"Verify the response contains a board ID\", function () {\r",
									"    pm.expect(board).to.have.property(\"id\");\r",
									"    console.log(\"Step 3: Response contains boardId:\", board.id);\r",
									"});\r",
									"\r",
									"// Step 4: Set the board id as a global variable if it exists\r",
									"if (board.id) {\r",
									"    pm.globals.set(\"boardId\", board.id);\r",
									"    console.log(\"Step 4: boardId set:\", board.id);\r",
									"} else {\r",
									"    console.log(\"Step 4: No 'id' found in the board response.\");\r",
									"}\r",
									"\r",
									"// Step 5: Log the response time for additional debugging\r",
									"console.log(\"Step 5: Response time: \" + pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{randomBoardName}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/1/boards/?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								""
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get New Board By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Verify the response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is: \" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object and retrieve the board name\r",
									"let response = pm.response.json();\r",
									"let boardName = response.name;  // Get the name of the board from the response\r",
									"let generatedBoardName = pm.globals.get(\"randomBoardName\");  // Get the previously generated board name\r",
									"console.log(\"Step 2: Generated Board Name: \" + generatedBoardName);\r",
									"console.log(\"Step 2: Received Board Name from Response: \" + boardName);\r",
									"\r",
									"// Step 3: Check if the board name from the response matches the generated name\r",
									"pm.test(\"The board name from the response matches the given name.\", function () {\r",
									"    pm.expect(boardName).to.eql(generatedBoardName, \r",
									"        `Board name check passed: Expected name: ${generatedBoardName}, Received name: ${boardName}`);\r",
									"});\r",
									"\r",
									"console.log(`Step 3: Generated board name: ${generatedBoardName}`);\r",
									"console.log(`Step 3: Received board name: ${boardName}`);\r",
									"\r",
									"// Step 4: Log the response time for additional debugging\r",
									"console.log(\"Step 4: Response time: \" + pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"packages": {},
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/{{boardId}}?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All List On New Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Verify the response status code\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is: \" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object.\r",
									"const response = pm.response.json();\r",
									"console.log(\"Step 2: Parsed response as JSON:\", response);\r",
									"\r",
									"// Step 3: Loop through each list in the response.\r",
									"let lists = [];\r",
									"response.forEach((list, index) => {\r",
									"    lists.push({\r",
									"        id: list.id,\r",
									"        name: list.name,\r",
									"        pos: list.pos\r",
									"    });\r",
									"    console.log(`Step 3: List ${index + 1} ID: ${list.id}, Name: ${list.name}, Position: ${list.pos}`);\r",
									"});\r",
									"\r",
									"// Step 4: Set the updatedList array as a global variable\r",
									"pm.globals.set(\"boardLists\", JSON.stringify(lists));\r",
									"console.log(\"Step 4: Board Lists:\", lists);\r",
									"\r",
									"// Step 5: Log the number of lists found.\r",
									"let listLength = response.length;\r",
									"console.log(`Step 5: Total number of lists found: ${listLength}`);\r",
									"\r",
									"// Step 6: Test if the response contains the correct list names in the correct order.\r",
									"pm.test(\"The board contains lists 'To Do', 'Doing', and 'Done' in the correct order, as expected.\", function () {\r",
									"    const expectedListNames = [\"To Do\", \"Doing\", \"Done\"];\r",
									"    let listNames = lists.map(list => list.name);\r",
									"    \r",
									"    pm.expect(listNames).to.eql(expectedListNames, `The lists should contain 'To Do', 'Doing', and 'Done' in the correct order. Expected: ${expectedListNames}, but got: ${listNames}`);\r",
									"    \r",
									"    // Log the expected and actual list names\r",
									"    console.log(\"Step 6: Expected list names: \" + expectedListNames);\r",
									"    console.log(\"Step 6: Received list names: \" + listNames);\r",
									"});\r",
									"\r",
									"// Step 7: Log response time.\r",
									"console.log(\"Step 7: Response time:\", pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/{{boardId}}/lists?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{boardId}}",
								"lists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Cards On New Board",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function() {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Response status code is: \" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Initialize cardsData as an empty array and process cards from the board response\r",
									"let cardsData = [];\r",
									"let boardResponse = pm.response.json(); // Assuming the response is JSON\r",
									"let cardCount = 0;\r",
									"\r",
									"if (Array.isArray(boardResponse) && boardResponse.length > 0) {\r",
									"    cardCount = boardResponse.length;\r",
									"    console.log(`Step 2: Total number of cards found: ${cardCount}`);\r",
									"    boardResponse.forEach(card => {\r",
									"        // Collect only required data for each card\r",
									"        cardsData.push({\r",
									"            id: card.id,\r",
									"            name: card.name,\r",
									"            position: card.pos, // Assuming 'pos' is the position of the card\r",
									"            listId: card.idList // Assuming 'idList' is the ID of the list the card belongs to\r",
									"        });\r",
									"    });\r",
									"} else {\r",
									"    // Log if no cards were found on the board\r",
									"    console.log(\"Step 2: No cards found on the board.\");\r",
									"}\r",
									"\r",
									"// Step 3: Test to verify the board has 0 cards and indicate this was expected\r",
									"pm.test(\"The board has no cards, as expected.\", function() {\r",
									"        pm.expect(cardCount).to.equal(0, \r",
									"        `Expected card count: 0, but got: ${cardCount}`);\r",
									"});\r",
									"\r",
									"console.log(`Step 3: Expected number of cards: 0`); \r",
									"console.log(`Step 3: Actual number of cards found: ${cardCount}`);\r",
									"\r",
									"// Step 4: Set updated cardsData as a global variable\r",
									"pm.globals.set(\"cardsData\", JSON.stringify(cardsData));\r",
									"console.log(\"Step 4: cardsData set:\", pm.globals.get(\"cardsData\"));\r",
									"\r",
									"// Step 5: Log response time for diagnostic purposes\r",
									"console.log(\"Step 5: Response time:\", pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/{{boardId}}/cards?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{boardId}}",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "**Description:**\n\nIn this test folder, the environment is prepared by interacting with Trello's API to create a new board and verify its initial state. The goal is to ensure the newly created board has the correct structure, including lists (\"To Do\", \"Doing\", \"Done\") and no cards, and that it matches the expected state for further testing.\n\nThe tests will:\n\n- Create a new Trello board with a randomly generated name.\n    \n- Fetch and verify the board's name and lists (\"To Do\", \"Doing\", \"Done\").\n    \n- Ensure the board is empty (no cards are present).\n    \n\n**Environment Variables to Set:**  \nEnsure the following environment variables are set:\n\n- `base_url`: The base URL for the Trello API.\n    \n- `key`: Your Trello API key.\n    \n- `token`: Your Trello API token.\n    \n\n**Request Steps:**\n\n### **POST/Create New Board - Create a New Trello Board**\n\nThis request creates a new board in Trello with a randomly generated name. This board will serve as the foundation for subsequent tests.\n\nIn this request:\n\n- A random name for the new board is generated and stored in the variable `randomName`.\n    \n- The board ID is captured from the response for use in future requests.\n    \n\n**Tests:**\n\n- **Verify the response status code is 200**: Ensures that the API request was successful and the board was created correctly.\n    \n- **Verify the response contains a valid board ID**: Ensures that the response returns an ID for the newly created board. This ID will be used in later steps to interact with the board.\n    \n\n### **GET/Get New Board By ID - Retrieve Newly Created Board by ID**\n\nThis request fetches the newly created board by its ID and verifies that the board’s name matches the one generated earlier.\n\nIn this request:\n\n- The newly created board is retrieved using its board ID.\n    \n- The board name from the response is checked to confirm it matches the one generated in the `randomName` variable.\n    \n\n**Tests:**\n\n- **Verify the response status code is 200**: Ensures the board can be successfully retrieved by its ID.\n    \n- **Verify the board name matches the generated random name**: Confirms that the board was created with the correct name.\n    \n\n### **GET/Get All Lists on New Board - Retrieve All Lists from the Newly Created Board**\n\nThis request fetches all the lists on the newly created board using its board ID. The goal is to verify that the default lists (\"To Do\", \"Doing\", \"Done\") are present and in the correct order.\n\nIn this request:\n\n- All lists are retrieved from the newly created board using its board ID.\n    \n- It is verified that the lists contain \"To Do\", \"Doing\", and \"Done\" in the correct order.\n    \n- The list information is stored in the global variable `boardLists` for future reference.\n    \n\n**Tests:**\n\n- **Verify the response status code is 200**: Ensures the API request was successful and the lists were retrieved.\n    \n- **Verify the lists contain 'To Do', 'Doing', and 'Done' in the correct order**: Checks that the lists returned from the API match the expected names and order.\n    \n\n### **GET/Get All Cards on New Board - Retrieve All Cards from the Newly Created Board**\n\nThis request fetches all the cards from the newly created board using its board ID. The goal is to verify that no cards are present on the board, ensuring it is empty and ready for further testing.\n\nIn this request:\n\n- All cards are retrieved from the newly created board using its board ID.\n    \n- It is checked that there are no cards on the board (the response should be empty).\n    \n- The card information is stored in the global variable `boardCards`, which will be empty for a newly created board.\n    \n\n**Tests:**\n\n- **Verify the response status code is 200**: Ensures the API request was successful and the cards were retrieved.\n    \n- **Verify the board has no cards**: Ensures the board is empty, as expected for a newly created board."
		},
		{
			"name": "Create 5 Lists",
			"item": [
				{
					"name": "Create A New List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Log: Start of Folder -Create 5 Lists\r",
									"console.log(\"Starting folder execution - Create 5 Lists...\");\r",
									"\r",
									"// Step 1: Manage the iteration count for the lists folder\r",
									"let listsFolderIterationsCount = pm.collectionVariables.get('lists_folder_iteration_number');\r",
									"\r",
									"if (listsFolderIterationsCount > 0) {\r",
									"    // Decrement the iteration count by 1\r",
									"    pm.collectionVariables.set('lists_folder_iteration_number', listsFolderIterationsCount - 1);\r",
									"    console.log(\"Step 1: Iteration count decreased. Remaining iterations: \" + (listsFolderIterationsCount - 1));\r",
									"} \r",
									"\r",
									"// Step 2: Generate and store a random name for the new list\r",
									"function generateRandomName(minLength, maxLength) {\r",
									"    const randomStr = Math.random().toString(36).substr(2, maxLength); // Generating random string\r",
									"    return randomStr.length >= minLength ? randomStr.substr(0, maxLength) : generateRandomName(minLength, maxLength); // Ensure length is within the limits\r",
									"}\r",
									"\r",
									"const randomListName = generateRandomName(1, 16384);\r",
									"pm.globals.set('randomListName', randomListName); \r",
									"console.log(\"Step 2: Random list name generated and set successfully: \" + randomListName);\r",
									"\r",
									"// Step 3: Generate and store a random position for the new list\r",
									"const positions = ['top', 'bottom'];\r",
									"const randomListPosition = positions[Math.floor(Math.random() * positions.length)];\r",
									"\r",
									"pm.globals.set('randomListPosition', randomListPosition);\r",
									"console.log(\"Step 3: Random list position generated and set successfully: \" + randomListPosition);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object\r",
									"let response;\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"    console.log(\"Step 2: Parsed response as JSON:\", response);\r",
									"} catch (error) {\r",
									"    console.error(\"Step 2: Failed to parse response as JSON:\", error);\r",
									"    pm.expect.fail(\"Step 2: Response is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Step 3: Ensure the response is an object and contains the 'id' property\r",
									"pm.test(\"Response contains a list id\", function () {\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response).to.have.property('id');\r",
									"    console.log(\"Step 3: Response is an object and contains id:\", response.id);\r",
									"});\r",
									"\r",
									"// Step 4: Set the getListId global variable\r",
									"if (response && response.id) {\r",
									"    let getListId = response.id.toString();\r",
									"    pm.globals.set(\"getListId\", getListId);\r",
									"    console.log(\"Step 4: Set global variable getListId to\", getListId);\r",
									"} else {\r",
									"    console.error(\"Step 4: Response does not contain a valid id:\", response);\r",
									"    pm.expect.fail(\"Step 4: Response does not contain a valid id\");\r",
									"}\r",
									"\r",
									"// Step 5: Log response time\r",
									"console.log(\"Step 5: Response time:\", pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{randomListName}}\",\r\n  \"pos\": \"{{randomListPosition}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/1/boards/{{boardId}}/lists?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{boardId}}",
								"lists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get New List By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object\r",
									"let createListResponse;\r",
									"try {\r",
									"    createListResponse = pm.response.json();\r",
									"    console.log(\"Step 2: Parsed response as JSON:\", createListResponse);\r",
									"} catch (error) {\r",
									"    console.error(\"Step 2: Failed to parse response as JSON:\", error);\r",
									"    pm.expect.fail(\"Step 2: Response is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Step 3: Check if the list name from the response matches the given name\r",
									"pm.test(\"The list name from the response matches the given name\", function () {\r",
									"        let expectedName = pm.globals.get('randomListName');\r",
									"      // Verify that the response name matches the expected name\r",
									"    pm.expect(createListResponse.name).to.equal(expectedName);\r",
									"    console.log(`Step 3: Retrieved list name ${createListResponse.name} matches expected name '${expectedName}'`);\r",
									"});\r",
									"\r",
									"// Step 4: Log response time\r",
									"console.log(\"Step 4: Response time:\", pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/lists/{{getListId}}?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"lists",
								"{{getListId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All List After Create New List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object\r",
									"let response;\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"    console.log(\"Step 2: Parsed response as JSON:\", response);\r",
									"} catch (error) {\r",
									"    console.error(\"Step 2: Failed to parse response as JSON:\", error);\r",
									"    pm.expect.fail(\"Step 2: Response is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Step 3: Check if the response contains a list\r",
									"if (Array.isArray(response)) {\r",
									"    console.log(\"Step 3: Response contains a list with\", response.length, \"items.\");\r",
									"} else {\r",
									"    console.error(\"Step 3: Response does not contain a list.\");\r",
									"}\r",
									"\r",
									"// Step 4: Loop through each list in the response and collect relevant data\r",
									"let updatedList = [];\r",
									"response.forEach((list, index) => {\r",
									"    updatedList.push({\r",
									"        id: list.id,\r",
									"        name: list.name,\r",
									"        pos: list.pos\r",
									"    });\r",
									"    console.log(`Step 4: List ${index + 1} ID: ${list.id}, Name: ${list.name}, Position: ${list.pos}`);\r",
									"});\r",
									"\r",
									"// Step 5: Set the updatedList array as a global variable\r",
									"pm.globals.set(\"updatedBoardLists\", JSON.stringify(updatedList));\r",
									"console.log(\"Step 5: Board Lists:\", updatedList);\r",
									"\r",
									"// Step 6: Check the number of lists and ensure one list was added\r",
									"let updatedBoardLists = pm.globals.get(\"updatedBoardLists\");\r",
									"let boardLists = pm.globals.get(\"boardLists\");\r",
									"\r",
									"// Convert JSON strings to JavaScript arrays (if necessary)\r",
									"updatedBoardLists = JSON.parse(updatedBoardLists);\r",
									"boardLists = JSON.parse(boardLists);\r",
									"\r",
									"// Log the values of both variables to ensure they are arrays\r",
									"console.log(\"Step 6: updatedBoardLists:\", updatedBoardLists);\r",
									"console.log(\"Step 6: boardLists:\", boardLists);\r",
									"\r",
									"// Now compare the lengths of the arrays\r",
									"pm.test(\"Only one list was added, as expected\", function () {\r",
									"    console.log(`Step 6: Total number of lists found in updatedBoardLists: ${updatedBoardLists.length}`);\r",
									"    console.log(`Step 6: Total number of lists found in boardLists: ${boardLists.length}`);\r",
									"    \r",
									"    // Expecting the updated board lists to be one item longer than the original\r",
									"    pm.expect(updatedBoardLists.length).to.equal(boardLists.length + 1);\r",
									"});\r",
									"\r",
									"// Step 7: Test to verify the position of the new list\r",
									"let randomListPosition = pm.globals.get(\"randomListPosition\"); \r",
									"\r",
									"pm.test(`The list position is ${randomListPosition}, as expected`, function () {\r",
									"    let getListId = pm.globals.get(\"getListId\");\r",
									"    const newListIndex = updatedBoardLists.findIndex(list => list.id === getListId); \r",
									"\r",
									"    if (newListIndex === -1) {\r",
									"        console.error(\"Step 7: New list ID not found in updatedBoardLists\");\r",
									"        pm.expect.fail(\"New list ID not found in updatedBoardLists\");\r",
									"    }\r",
									"\r",
									"    const newList = updatedBoardLists[newListIndex];\r",
									"    const newListPosition = newList.pos;\r",
									"\r",
									"    console.log(`Step 7: The new list (ID: ${newList.id}, Name: ${newList.name}) is at position: ${newListPosition}`);\r",
									"\r",
									"    let isPositionCorrect = false;\r",
									"    let expectedPosition = 0;\r",
									"\r",
									"    switch (randomListPosition) {\r",
									"        case \"top\":\r",
									"            expectedPosition = Math.min(...updatedBoardLists.map(list => list.pos));\r",
									"            isPositionCorrect = newListPosition === expectedPosition;\r",
									"            console.log(`Step 7: Expected position for \"top\" is: ${expectedPosition}`);\r",
									"            break;\r",
									"\r",
									"        case \"bottom\":\r",
									"            expectedPosition = Math.max(...updatedBoardLists.map(list => list.pos));\r",
									"            isPositionCorrect = newListPosition === expectedPosition;\r",
									"            console.log(`Step 7: Expected position for \"bottom\" is: ${expectedPosition}`);\r",
									"            break;\r",
									"\r",
									"        default:\r",
									"            console.log(\"Step 7: Invalid position value:\", randomListPosition);\r",
									"            break;\r",
									"    }\r",
									"\r",
									"    // Final validation\r",
									"    console.log(`Step 7: The new list (ID: ${newList.id}) position is ${isPositionCorrect ? \"correct\" : \"incorrect\"}`);\r",
									"    pm.expect(isPositionCorrect).to.be.true;\r",
									"});\r",
									"\r",
									"// Step 8: Update the boardLists variable with updatedBoardLists and save it in global variables\r",
									"pm.globals.set(\"boardLists\", JSON.stringify(updatedBoardLists));\r",
									"console.log(\"Step 8: The 'boardLists' variable has been updated with the following lists:\");\r",
									"console.log(updatedBoardLists);\r",
									"\r",
									"// Step 9: Log response time for diagnostic purposes\r",
									"console.log(\"Step 9: Response time: \" + pm.response.responseTime + \"ms\");\r",
									"\r",
									"/////////////\r",
									"//Checks the iteration count for the \"lists\" folder, and if it's greater than 0, it repeats the first request; if it's 0, it moves to the next request.\r",
									"let lists_folder_iteration_number_count = pm.collectionVariables.get('lists_folder_iteration_number');\r",
									"\r",
									"if (lists_folder_iteration_number_count > 0) {\r",
									"    // Set the next request to the first request in the folder\r",
									"    pm.execution.setNextRequest('Create A New List');\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/{{boardId}}/lists?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{boardId}}",
								"lists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "**Description:**\n\nThis folder contains a series of requests designed to test the functionality of creating, retrieving, and validating lists on a Trello board using Trello's API.\n\n**Request Steps & Tests:**\n\n### **POST / Create A New List - Create a New List on the Board**\n\nThis request creates a new list on an existing Trello board. The list will have a randomly generated name and be positioned either at the top or bottom of the board.\n\nIn this request:\n\n- A random name for the new list is generated and stored in the variable `randomListName`.\n    \n- A random position (\"top\" or \"bottom\") is assigned and stored in `randomListPosition`.\n    \n- The list is created on the specified board using the Trello API.\n    \n- Additionally, the variable `lists_folder_iteration_number` is checked to track how many iterations have been performed in the folder. This ensures the folder is iterated the correct number of times.\n    \n\n**Tests:**\n\n- **Verify the response status is 200**: Ensures the list was created successfully.\n    \n- **Verify the response contains a valid list ID**: Confirms that the response contains a valid list ID, which is stored in the variable `getListId` for future use.\n    \n\n### **GET / Get New List By Id - Retrieve Newly Created List by ID**\n\nThis request retrieves the newly created list from Trello using its list ID. The goal is to verify that the list name matches the randomly generated name from the previous step.\n\nIn this request:\n\n- The list is fetched using the list ID stored in the variable `getListId`.\n    \n- The list's name is compared with the randomly generated name `randomListName` to ensure it matches.\n    \n\n**Tests:**\n\n- **Verify the response status is 200**: Ensures the request to fetch the list was successful.\n    \n- **Verify the list name matches the expected name**: Confirms that the list's name returned in the response matches the randomly generated name stored in `randomListName`.\n    \n\n### **GET / Get All Lists After Create New List - Retrieve All Lists After New List Creation**\n\nThis request retrieves all lists on the board after creating a new list. This helps verify that the new list has been added successfully and that the board's list structure is as expected.\n\nIn this request:\n\n- The response is parsed and checked to ensure it contains a list of board lists.\n    \n- The updated list data (including ID, name, and position) is logged and stored for future reference.\n    \n- The position of the newly created list is checked to ensure it matches the expected position (top or bottom).\n    \n- A flag is used to reset the iteration counter (`lists_folder_iteration_number`) after the iteration is complete, allowing for the process to start over.\n    \n\n**Tests:**\n\n- **Verify the response status is 200**: Ensures the request to fetch all lists was successful.\n    \n- **Verify that the correct number of lists is returned**: Confirms that only one list has been added to the board.\n    \n- **Verify the position of the new list**: Ensures that the new list is placed in the expected position (top or bottom) on the board."
		},
		{
			"name": "Update Name Of List",
			"item": [
				{
					"name": "Update List Name",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Log: Start of Folder -  Update Name Of List\r",
									"console.log(\"Starting folder execution - Update Name Of List...\");\r",
									"\r",
									"// Step 1: Generate and store a random name for the updated list\r",
									"function generateRandomName(minLength, maxLength) {\r",
									"    const randomStr = Math.random().toString(36).substr(2, maxLength); // Generating random string\r",
									"    return randomStr.length >= minLength ? randomStr.substr(0, maxLength) : generateRandomName(minLength, maxLength); // Ensure length is within the limits\r",
									"}\r",
									"\r",
									"const randomUpdatedListName = generateRandomName(1, 16384);\r",
									"pm.globals.set('randomUpdatedListName', randomUpdatedListName); \r",
									"console.log(\"Step 1: Random list name generated and set successfully: \" + randomUpdatedListName);\r",
									"\r",
									"// Step 2: Get the updatedBoardLists from globals and parse it back to an array of objects\r",
									"let updatedBoardListsString = pm.globals.get(\"updatedBoardLists\");\r",
									"let updatedBoardLists = JSON.parse(updatedBoardListsString);\r",
									"\r",
									"console.log(\"Step 2: Updated board lists:\", updatedBoardLists);\r",
									"\r",
									"// Step 3: Generate a random index to get the random list Id\r",
									"function randomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1) + min);\r",
									"}\r",
									"\r",
									"const randomIndex = randomInt(0, updatedBoardLists.length - 1);\r",
									"console.log(\"Step 3: Generated random index:\", randomIndex);\r",
									"const randomListId = updatedBoardLists[randomIndex].id;\r",
									"console.log(\"Step 3: Random list ID:\", randomListId);\r",
									"\r",
									"// Step 4: Save list id and name as global variable \r",
									"pm.globals.set(\"randomList\", randomListId.toString());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"//Step 2: Verify the list name has been updated\r",
									"const randomUpdatedListName = pm.globals.get(\"randomUpdatedListName\");\r",
									"\r",
									"pm.test(`The list name has been updated to \"${randomUpdatedListName}, as expected`, function () {\r",
									"       const responseData = pm.response.json();\r",
									"       pm.expect(responseData.name).to.equal(randomUpdatedListName);\r",
									"  \r",
									"    console.log(`Step 2: The list name has been updated to \"${responseData.name}\".`);\r",
									"});\r",
									"\r",
									"// Step 3: Log response time\r",
									"console.log(\"Step 3: Response time:\", pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "file",
							"file": {}
						},
						"url": {
							"raw": "{{base_url}}/1/lists/{{randomList}}?key={{key}}&token={{token}}&name={{randomUpdatedListName}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"lists",
								"{{randomList}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "name",
									"value": "{{randomUpdatedListName}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated List By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"//Step 2: Verify the list name has been updated\r",
									"const randomUpdatedListName = pm.globals.get(\"randomUpdatedListName\");\r",
									"\r",
									"pm.test(`The list name has been updated to ${randomUpdatedListName}, as expected`, function () {\r",
									"       const responseData = pm.response.json();\r",
									"       pm.expect(responseData.name).to.equal(randomUpdatedListName);\r",
									"  \r",
									"    console.log(`Step 2: The list name has been updated to \"${responseData.name}\".`);\r",
									"});\r",
									"\r",
									"// Step 3: Log response time\r",
									"console.log(\"Step 3: Response time:\", pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/lists/{{randomList}}?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"lists",
								"{{randomList}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "**Description:**\n\nIn this folder, the functionality of updating the name of a list on a Trello board is tested and the change is verified through a follow-up request.\n\n**Request Steps & Tests:**\n\n### **PUT / Update Name Of List - Update the Name of a List**\n\nThis request updates the name of a randomly selected list on an existing Trello board. A new name is generated and assigned to ensure the update is applied successfully.\n\nIn this request:\n\n- A random list is selected from the existing lists stored in `updatedBoardLists`.\n    \n- A new random name is generated and stored in the variable `updatedRandomName`.\n    \n- The selected list by Id storred in `getListId` updated with the new name using the Trello API.\n    \n\n**Tests:**\n\n- **Verify the response status is 200**: Ensures the update request was successful.\n    \n\n### **GET / Get Updated List By Id - Retrieve Updated List by ID**\n\nThis request retrieves the updated list by its ID to verify that the list's name has been successfully updated.\n\nIn this request:\n\n- The list is retrieved using its ID (`getListId`), which was set earlier when the list was updated.\n    \n- The updated list’s name is verified by comparing it with the `updatedRandomName` variable, which holds the new name that was assigned.\n    \n\n**Tests:**\n\n- **Verify the response status is 200**: Ensures the request was successful and the response status code is 200, confirming that the updated list details are retrieved correctly.\n    \n- **Verify the list name matches** **`updatedRandomName`**: Confirms that the list name returned in the response matches the expected new name (`updatedRandomName`), indicating the update was applied successfully."
		},
		{
			"name": "Archive Random List",
			"item": [
				{
					"name": "Archive List On Board",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Log: Start of Folder - Archive List On Board\r",
									"console.log(\"Starting folder execution - Archive List On Board...\");\r",
									"\r",
									"// Step 1: Get the updatedBoardLists from globals and parse it back to an array of objects\r",
									"let updatedBoardListsString = pm.globals.get(\"updatedBoardLists\");\r",
									"let updatedBoardLists = JSON.parse(updatedBoardListsString);\r",

									"\r",
									"console.log(\"Step 1: Updated board lists:\", updatedBoardLists);\r",
									"\r",
									"// Step 2: Generate a random index to get the random list Id\r",
									"function randomInt(min, max) {\r",
									"    return Math.floor(Math.random() * (max - min + 1) + min);\r",
									"}\r",

									"const randomIndex = randomInt(0, updatedBoardLists.length - 1);\r",
									"console.log(\"Step 3: Generated random index:\", randomIndex);\r",
									"const randomArchiveListId = updatedBoardLists[randomIndex].id;\r",
									"console.log(\"Step 3: Random list ID:\", randomArchiveListId);\r",

									"\r",
									"// Step 4: Save list id and name as global variable \r",
									"pm.globals.set(\"randomArchiveListId\", randomArchiveListId.toString());\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",

                  "// Step 2: Log response time\r",
									"console.log(\"Step 2: Response time:\", pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/1/lists/{{randomArchiveListId}}/closed?key={{key}}&token={{token}}&value=true",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"lists",
								"{{randomArchiveListId}}",
								"closed"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								},
								{
									"key": "value",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Archive List By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Check if response body contains \"closed\": true\r",
									"pm.test(\"List has not been archived, as expected\", function () {\r",
									"    const responseBody = pm.response.json();\r",
									"    pm.expect(responseBody.closed).to.be.true;\r",
									"    \r",
									"    if (responseBody.closed === false) {\r",
									"        console.log(\"Step 2: The list has not been archived, as 'closed' is false.\");\r",
									"    } else {\r",
									"        console.log(\"Step 2: The list has been archived, 'closed' is true.\");\r",
									"    }\r",
									"});\r",
									"\r",
									"// Step 3: Log response time\r",
									"console.log(\"Step 3: Response time:\", pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/lists/{{randomArchiveListId}}?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"lists",
								"{{randomArchiveListId}}"

							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All List On Board After Archive List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object\r",
									"let response;\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"    console.log(\"Step 2: Parsed response as JSON:\", response);\r",
									"} catch (error) {\r",
									"    console.error(\"Step 2: Failed to parse response as JSON:\", error);\r",
									"    pm.expect.fail(\"Step 2: Response is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Step 3: Check if the response contains a list\r",
									"if (Array.isArray(response)) {\r",
									"    console.log(\"Step 3: Response contains a list with\", response.length, \"items.\");\r",
									"} else {\r",
									"    console.error(\"Step 3: Response does not contain a list.\");\r",
									"}\r",
									"\r",
									"// Step 4: Loop through each list in the response and collect relevant data\r",
									"let updatedList = [];\r",
									"response.forEach((list, index) => {\r",
									"    updatedList.push({\r",
									"        id: list.id,\r",
									"        name: list.name,\r",
									"        pos: list.pos\r",
									"    });\r",
									"    console.log(`Step 4: List ${index + 1} ID: ${list.id}, Name: ${list.name}, Position: ${list.pos}`);\r",
									"});\r",
									"\r",
									"// Step 5: Set the updatedList array as a global variable (this is the updated state after archiving)\r",
									"pm.globals.set(\"updatedArchivedBoardLists\", JSON.stringify(updatedList));\r",
									"console.log(\"Step 5: Updated Archived Board Lists:\", updatedList);\r",
									"\r",
									"// Step 6: Retrieve the previous list state and the newly updated state\r",
									"let updatedArchivedBoardLists = pm.globals.get(\"updatedArchivedBoardLists\");\r",
									"let updatedBoardLists = pm.globals.get(\"updatedBoardLists\");\r",
									"\r",
									"// Convert JSON strings to JavaScript arrays (if necessary)\r",
									"updatedArchivedBoardLists = JSON.parse(updatedArchivedBoardLists);\r",
									"updatedBoardLists = JSON.parse(updatedBoardLists);\r",
									"\r",
									"// Log the values of both variables to ensure they are arrays\r",
									"console.log(\"Step 6: updatedArchivedBoardLists:\", updatedArchivedBoardLists);\r",
									"console.log(\"Step 6: updatedBoardLists:\", updatedBoardLists);\r",
									"\r",
									"// Step 7: Now compare the lengths of the arrays to ensure one list was archived\r",
									"pm.test(\"Only one list was archived, as expected\", function () {\r",
									"    console.log(`Step 7: Total number of lists found in updatedArchivedBoardLists: ${updatedArchivedBoardLists.length}`);\r",
									"    console.log(`Step 7: Total number of lists found in updatedBoardLists: ${updatedBoardLists.length}`);\r",
									"    \r",
									"    // Expecting the updated archived board lists to be one item shorter than the original board lists\r",
									"    pm.expect(updatedArchivedBoardLists.length).to.equal(updatedBoardLists.length - 1);\r",
									"});\r",
									"\r",
									"// Step 8: Update the updatedBoardLists variable with updatedArchivedBoardLists and save it in global variables\r",
									"pm.globals.set(\"updatedBoardLists\", JSON.stringify(updatedArchivedBoardLists));\r",
									"console.log(\"Step 8: The 'updatedBoardLists' variable has been updated with the following lists:\");\r",
									"console.log(updatedArchivedBoardLists);\r",
									"\r",
									"// Step 9: Log response time for diagnostic purposes\r",
									"console.log(\"Step 9: Response time: \" + pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/{{boardId}}/lists?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{boardId}}",
								"lists"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All List On Board After Archive List",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object\r",
									"let response;\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"    console.log(\"Step 2: Parsed response as JSON:\", response);\r",
									"} catch (error) {\r",
									"    console.error(\"Step 2: Failed to parse response as JSON:\", error);\r",
									"    pm.expect.fail(\"Step 2: Response is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Step 3: Check if the response contains a list\r",
									"if (Array.isArray(response)) {\r",
									"    console.log(\"Step 3: Response contains a list with\", response.length, \"items.\");\r",
									"} else {\r",
									"    console.error(\"Step 3: Response does not contain a list.\");\r",
									"}\r",
									"\r",
									"// Step 4: Loop through each list in the response and collect relevant data\r",
									"let updatedList = [];\r",
									"response.forEach((list, index) => {\r",
									"    updatedList.push({\r",
									"        id: list.id,\r",
									"        name: list.name,\r",
									"        pos: list.pos\r",
									"    });\r",
									"    console.log(`Step 4: List ${index + 1} ID: ${list.id}, Name: ${list.name}, Position: ${list.pos}`);\r",
									"});\r",
									"\r",
									"// Step 5: Set the updatedList array as a global variable (this is the updated state after archiving)\r",
									"pm.globals.set(\"updatedArchivedBoardLists\", JSON.stringify(updatedList));\r",
									"console.log(\"Step 5: Updated Archived Board Lists:\", updatedList);\r",
									"\r",
									"// Step 6: Retrieve the previous list state and the newly updated state\r",
									"let updatedArchivedBoardLists = pm.globals.get(\"updatedArchivedBoardLists\");\r",
									"let updatedBoardLists = pm.globals.get(\"updatedBoardLists\");\r",
									"\r",
									"// Convert JSON strings to JavaScript arrays (if necessary)\r",
									"updatedArchivedBoardLists = JSON.parse(updatedArchivedBoardLists);\r",
									"updatedBoardLists = JSON.parse(updatedBoardLists);\r",
									"\r",
									"// Log the values of both variables to ensure they are arrays\r",
									"console.log(\"Step 6: updatedArchivedBoardLists:\", updatedArchivedBoardLists);\r",
									"console.log(\"Step 6: updatedBoardLists:\", updatedBoardLists);\r",
									"\r",
									"// Step 7: Now compare the lengths of the arrays to ensure one list was archived\r",
									"pm.test(\"Only one list was archived, as expected\", function () {\r",
									"    console.log(`Step 7: Total number of lists found in updatedArchivedBoardLists: ${updatedArchivedBoardLists.length}`);\r",
									"    console.log(`Step 7: Total number of lists found in updatedBoardLists: ${updatedBoardLists.length}`);\r",
									"    \r",
									"    // Expecting the updated archived board lists to be one item shorter than the original board lists\r",
									"    pm.expect(updatedArchivedBoardLists.length).to.equal(updatedBoardLists.length - 1);\r",
									"});\r",
									"\r",
									"// Step 8: Update the updatedBoardLists variable with updatedArchivedBoardLists and save it in global variables\r",
									"pm.globals.set(\"updatedBoardLists\", JSON.stringify(updatedArchivedBoardLists));\r",
									"console.log(\"Step 8: The 'updatedBoardLists' variable has been updated with the following lists:\");\r",
									"console.log(updatedArchivedBoardLists);\r",
									"\r",
									"// Step 9: Log response time for diagnostic purposes\r",
									"console.log(\"Step 9: Response time: \" + pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": ""
						}
					},
					"response": []
				}
			],
			"description": "**Description:**\n\nThis folder contains a series of requests designed to test the functionality of archiving lists on a Trello board using Trello's API.\n\n**Request Steps & Test:**\n\n**PUT / Archive List On Board - Archive a Randomly Selected List**\n\nThis request archives a randomly selected list on an existing Trello board. The request marks the list as archived, and its ID is stored for further validation.\n\nIn this request:\n\n- A random list is selected from the existing lists stored in `updatedBoardLists`.\n    \n- The selected list is updated using the Trello API to set `closed: true`.\n    \n- The archived list’s ID is stored in the variable `randomArchiveListId` for use in subsequent tests.\n    \n\n**Tests:**\n\n- **Verify the response status is 200**: Ensures the archive request was successful.\n    \n\n**GET / Get Archived List By Id - Retrieve Archived List By ID**\n\nThis request retrieves a previously archived list from an existing Trello board. It verifies that the list has been successfully archived, using the stored ID for validation.\n\nIn this request:\n\n- A previously archived list is retrieved using its ID stored in `randomArchiveListId`.\n    \n- The list is verified to be correctly marked as archived.\n    \n\n**Tests:**\n\n- **Verify the response status is 200**: Ensures the request was successful.\n    \n- **Verify the list is archived (****`closed: true`****)**: Confirms that the list is no longer active.\n    \n\n**GET / Get All Lists On Board After Archive List - Verify Board Lists After Archiving**\n\nThis request retrieves all active lists on an existing Trello board after archiving a list. It ensures that the archived list is no longer present in the active lists.\n\nIn this request:\n\n- The updated state of the board is retrieved after archiving a list.\n    \n- The response, containing all active (non-archived) lists on the board, is stored in `updatedArchivedBoardLists` for further validation.\n    \n- The previous state (`updatedBoardLists`) is compared to confirm that one list has been removed.\n    \n\n**Tests:**\n\n- **Verify the response status is 200**: Ensures the request was successful.\n    \n- **Verify one list was archived**: Checks that the new list count is exactly one less than before archiving."

		},
		{
			"name": "Create 5 Cards",
			"item": [
				{
					"name": "Create A New Card",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Log: Start of Folder - Create 5 Cards\r",
									"console.log(\"Starting folder execution - Create 5 Cards...\");\r",
									"\r",
									"// Step 1: Manage the iteration count for the lists folder\r",
									"let cardsFolderIterationsCount = pm.collectionVariables.get('cards_folder_iteration_number');\r",
									"\r",
									"if (cardsFolderIterationsCount > 0) {\r",
									"    // Decrement the iteration count by 1\r",
									"    pm.collectionVariables.set('cards_folder_iteration_number', cardsFolderIterationsCount - 1);\r",
									"    console.log(\"Step 1: Iteration count decreased. Remaining iterations: \" + (cardsFolderIterationsCount - 1));\r",
									"}\r",
									"\r",
									"// Step 2: Generate and store a random name for the new card\r",
									"function generateRandomName(minLength, maxLength) {\r",
									"    const prefix = \"TestCard\";  // Prefix that will always appear at the start\r",
									"    const randomStr = Math.random().toString(36).substr(2, maxLength - prefix.length); // Generating random string after the prefix\r",
									"\r",
									"    return prefix + randomStr; // Combine prefix with the random string\r",
									"}\r",
									"\r",
									"const randomCardName = generateRandomName(1, 25);  // 'TestCard' as the start, with the rest being random\r",
									"pm.globals.set('randomCardName', randomCardName); \r",
									"console.log(\"Step 2: Random card name generated and set successfully: \" + randomCardName);\r",
									"\r",
									"// Step 3: Generate and store a random position for the new card\r",
									"const positions = ['top', 'bottom'];\r",
									"const randomCardPosition = positions[Math.floor(Math.random() * positions.length)];\r",
									"pm.globals.set('randomCardPosition', randomCardPosition);\r",
									"console.log(\"Step 3: Random card position generated and set successfully: \" + randomCardPosition);\r",
									"\r",
									"// Step 4: Generate and store a random Id of the list the card should be created in\r",
									"let updatedBoardListsString = pm.globals.get(\"updatedBoardLists\");\r",
									"let updatedBoardLists = JSON.parse(updatedBoardListsString);\r",
									"console.log(\"Step 4: Updated board lists:\", updatedBoardLists);\r",
									"const randomIndex = Math.floor(Math.random() * updatedBoardLists.length);\r",
									"console.log(\"Step 4: Generated random index:\", randomIndex);\r",
									"const randomListIdCard = updatedBoardLists[randomIndex].id;\r",
									"console.log(\"Step 5: Random list ID:\", randomListIdCard);\r",
									"pm.globals.set('randomListIdCard', randomListIdCard);\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object\r",
									"let response;\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"    console.log(\"Step 2: Parsed response as JSON:\", response);\r",
									"} catch (error) {\r",
									"    console.error(\"Step 2: Failed to parse response as JSON:\", error);\r",
									"    pm.expect.fail(\"Step 2: Response is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Step 3: Ensure the response contains a valid card id\r",
									"pm.test(\"Response contains a valid card id\", function () {\r",
									"    pm.expect(response).to.be.an('object');\r",
									"    pm.expect(response.id).to.be.a('string');\r",
									"    console.log(\"Step 3: Response is an object and contains a valid card id:\", response.id);\r",
									"});\r",
									"\r",
									"// Step 4: Set the getCardId global variable\r",
									"if (response && response.id) {\r",
									"    let getCardId = response.id.toString();\r",
									"    pm.globals.set(\"getCardId\", getCardId); \r",
									"    console.log(\"Step 4: Set global variable getCardId to\", getCardId);\r",
									"} else {\r",
									"    console.error(\"Step 4: Response does not contain a valid card id:\", response);\r",
									"    pm.expect.fail(\"Step 4: Response does not contain a valid card id\");\r",
									"}\r",
									"\r",
									"// Step 5: Log response time\r",
									"console.log(\"Step 5: Response time:\", pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{randomCardName}}\",\r\n  \"pos\": \"{{randomCardPosition}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/1/cards?idList={{randomListIdCard}}&key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"cards"
							],
							"query": [
								{
									"key": "idList",
									"value": "{{randomListIdCard}}"
								},
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get New Card By Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object\r",
									"let createCardResponse;\r",
									"try {\r",
									"    createCardResponse = pm.response.json();\r",
									"    console.log(\"Step 2: Parsed response as JSON:\", createCardResponse);\r",
									"} catch (error) {\r",
									"    console.error(\"Step 2: Failed to parse response as JSON:\", error);\r",
									"    pm.expect.fail(\"Step 2: Response is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Step 3: Check if the card name from the response matches the given name\r",
									"pm.test(\"The card name from the response matches the given name\", function () {\r",
									"    let expectedName = pm.globals.get('randomCardName');\r",
									"    // Verify that the response name matches the expected name\r",
									"    pm.expect(createCardResponse.name).to.equal(expectedName);\r",
									"    console.log(`Step 3: Retrieved list name ${createCardResponse.name} matches expected name '${expectedName}'`);\r",
									"});\r",
									"\r",
									"// Step 4: Ensure the response idList matches randomListIdCard\r",
									"pm.test(\"The card has been added to the correct list, as expected\", function () {\r",
									"    pm.expect(createCardResponse.idList.toString()).to.equal(pm.globals.get(\"randomListIdCard\"));\r",
									"    console.log(\"Step 4: idList matches randomListIdCard\");\r",
									"});\r",
									"\r",
									"// Step 5: Log response time\r",
									"console.log(\"Step 5: Response time:\", pm.response.responseTime + \"ms\");\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/cards/{{getCardId}}?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"cards",
								"{{getCardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get All Cards On Board After Created Card",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\", pm.response.code);\r",
									"});\r",
									"\r",
									"// Step 2: Parse the response as a JSON object\r",
									"let response;\r",
									"try {\r",
									"    response = pm.response.json();\r",
									"    console.log(\"Step 2: Parsed response as JSON:\", response);\r",
									"} catch (error) {\r",
									"    console.error(\"Step 2: Failed to parse response as JSON:\", error);\r",
									"    pm.expect.fail(\"Step 2: Response is not valid JSON\");\r",
									"}\r",
									"\r",
									"// Step 3: Check if the response contains an array of cards\r",
									"if (Array.isArray(response)) {\r",
									"    console.log(\"Step 3: Response contains\", response.length, \"cards.\");\r",
									"    \r",
									"    // Step 4: Collect relevant data from each card in the response\r",
									"    let updatedCards = response.map((card, index) => ({\r",
									"        id: card.id,\r",
									"        name: card.name,\r",
									"        pos: card.pos,\r",
									"        listId: card.idList\r",
									"    }));\r",
									"\r",
									"    updatedCards.forEach((card, index) => {\r",
									"        console.log(`Step 4: Card ${index + 1} ID: ${card.id}, Name: ${card.name}, Position: ${card.pos}, ListId: ${card.listId}`);\r",
									"    });\r",
									"\r",
									"    // Step 5: Retrieve the previous cards data from globals\r",
									"    let previousCardsData = pm.globals.get(\"cardsData\");\r",
									"    previousCardsData = previousCardsData ? JSON.parse(previousCardsData) : [];\r",
									"\r",
									"    // Step 6: Test to verify the number of cards after deletion\r",
									"    pm.test(\"One card was added, as expected\", function () {\r",
									"    console.log(`Step 6: Number of cards before operation: ${previousCardsData.length}`);\r",
									"    console.log(`Step 6: Number of cards after operation: ${updatedCards.length}`);\r",
									"\r",
									"    if (previousCardsData.length === 0) {\r",
									"        pm.expect(updatedCards.length).to.equal(1);\r",
									"    } else {\r",
									"        pm.expect(updatedCards.length).to.equal(previousCardsData.length + 1);\r",
									"    }\r",
									"});\r",
									"\r",
									"    // Step 7: Update the global variable with the current cards data\r",
									"    pm.globals.set(\"cardsData\", JSON.stringify(updatedCards));\r",
									"    console.log(\"Step 7: Updated 'cardsData' global variable.\");\r",
									"} else {\r",
									"    console.error(\"Step 3: Response is not an array of cards:\", response);\r",
									"}\r",
									"\r",
									"// Step 8: Log response time for diagnostic purposes\r",
									"console.log(\"Step 8: Response time:\", pm.response.responseTime + \"ms\");\r",
									"\r",
									"/////////////\r",
									"//Checks the iteration count for the \"cards\" folder, and if it's greater than 0, it repeats the first request; if it's 0, it moves to the next request.\r",
									"let cards_folder_iteration_number_count = pm.collectionVariables.get('cards_folder_iteration_number');\r",
									"\r",
									"if (cards_folder_iteration_number_count > 0) {\r",
									"    // Set the next request to the first request in the folder\r",
									"    pm.execution.setNextRequest('Create A New Card');\r",
									"}\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/{{boardId}}/cards?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{boardId}}",
								"cards"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "**Description:**\n\nThis folder contains a series of requests designed to test the functionality of creating and verifying new cards on a Trello board using Trello's API.\n\n**Request Steps & Tests:**\n\n**1\\. POST / Create New Card - Create a New Card in a Randomly Selected List**\n\nThis request creates a new card on a randomly selected list within an existing Trello board. The card is assigned a randomly generated name and position, and its ID is stored for further validation.\n\n_In this request:_\n\n- A random name for the new card is generated and stored in the variable `randomCardName`.\n    \n- A random position (`top` or `bottom`) is selected and stored in `randomCardPosition`.\n    \n- A random list is selected from the existing lists on the board (stored in `updatedBoardLists`), and the card is created in that list.\n    \n- The card's ID is stored in the variable `getCardId` for future validation.\n    \n- The collection variable `cards_folder_iteration_number` is checked to determine the number of iterations to perform for creating cards.\n    \n\n_Tests:_\n\n- **Verify the response status is 200:** Ensures the card creation request was successful.\n    \n- **Verify the response contains a valid card ID:** Confirms that the response contains a valid card ID, which will be stored for future reference.\n    \n\n**2\\. GET / Get New Card By Id - Retrieve a Card by its ID**\n\nThis request retrieves a specific card from a Trello board using its ID to verify its details, including the card's name and the list it belongs to. The response is compared against the expected values to ensure the card was created correctly.\n\n_In this request:_\n\n- The ID of the newly created card (stored in the variable `getCardId`) is used to fetch the card’s details from Trello.\n    \n- The card's name is checked to ensure it matches the randomly generated name stored in `randomCardName`.\n    \n- The `idList` value from the response is compared to `randomListIdCard` to verify that the card was placed in the correct list.\n    \n\n_Tests:_\n\n- **Verify the response status is 200:** Ensures the request to retrieve the card was successful.\n    \n- **Verify the card name matches the expected name:** Confirms that the card name in the response matches the randomly generated name used during card creation.\n    \n- **Verify the card has been added to the correct list:** Ensures that the card was added to the expected list, as indicated by the `idList` field in the response.\n    \n\n**3\\. GET / Get All Cards On Board After Created Card - Retrieve All Cards on a Trello Board**\n\nThis request retrieves all cards from a specified Trello board to verify the addition of a newly created card. By comparing the current list of cards with the previously stored list, it ensures that the new card has been successfully added.\n\n_In this request:_\n\n- The Trello board ID is used to fetch all cards associated with that board.\n    \n- The response is parsed to extract relevant details of each card, such as `id`, `name`, `pos`, and `idList`.\n    \n- The current list of cards (`updatedCards`) is compared to the previously stored list (`cardsData`) to determine if a new card has been added.\n    \n- The collection variable `cards_folder_iteration_number` is checked to determine if additional iterations are needed. If the iteration count is greater than 0, the next request is set to 'Create A New Card' to continue the process.\n    \n\n_Tests:_\n\n- **Verify the response status is 200:** Ensures the request to retrieve all cards was successful.\n    \n- **Verify one card was added, as expected:** Compares the number of cards before and after the addition to ensure that exactly one new card has been added.\n    \n- **Verify the new card's position is as expected:** Checks that the newly added card's position (`pos`) aligns with the specified `randomCardPosition` (e.g., \"top\" or \"bottom\") within its list."

		},
		{
			"name": "Post-Test Cleanup - Delete Board",
			"item": [
				{
					"name": "Delete Board by Id",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Log: Start of Folder - Post-Test Cleanup - Delete Board\r",
									"console.log(\"Starting folder execution -Post-Test Cleanup - Delete Board...\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 200\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(200);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Log response time\r",
									"console.log(\"Step 2: Response time:\", pm.response.responseTime + \"ms\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/{{boardId}}?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Board by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"// Step 1: Check response status code\r",
									"pm.test(\"Response status is 404\", function () {\r",
									"    let statusCode = pm.response.code;\r",
									"    pm.response.to.have.status(404);\r",
									"    console.log(\"Step 1: Status code is:\" + statusCode);\r",
									"});\r",
									"\r",
									"// Step 2: Log response time\r",
									"console.log(\"Step 2: Response time:\", pm.response.responseTime + \"ms\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/1/boards/{{boardId}}?key={{key}}&token={{token}}",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"1",
								"boards",
								"{{boardId}}"
							],
							"query": [
								{
									"key": "key",
									"value": "{{key}}"
								},
								{
									"key": "token",
									"value": "{{token}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "**Description:**\n\nIn this test folder, the environment is cleaned up by interacting with Trello's API to delete a board created during testing. The goal is to ensure the board is properly removed from the system and no longer exists, clearing up any test artifacts.\n\n**DEL / Delete Board by Id**\n\n#### **Description:**\n\nThis request deletes a Trello board using its stored ID, ensuring that the test environment is cleaned up after the tests have been executed.\n\n**Steps:**\n\n1. Send a request to delete the board using its ID.\n    \n\n**Tests:**\n\n- **Verify the response status is 200** – Confirms that the board was successfully deleted.\n    \n\n**GET / Get Deleted Board by Id**\n\n**Description:**\n\nThis request attempts to retrieve the board that was deleted, verifying that it no longer exists in the system.\n\n**Steps:**\n\n1. Send a request to fetch the deleted board by its ID.\n    \n\n**Tests:**\n\n- **Verify the response status is 404** – Confirms that the board cannot be retrieved, indicating it has been successfully deleted."
		}
	],
	"variable": [
		{
			"key": "lists_folder_iteration_number",
			"value": "5"
		},
		{
			"key": "cards_folder_iteration_number",
			"value": "5"
		}
	]
}